#
# Smartfile
# Smartlane
# Copyright (c) 2017 Smart&Soft. All rights reserved.
#
################################################################################

fastlane_require 'rest-client'

fastlane_version '2.80.0'

ENV['ROOT_DIR'] = ENV['PWD']
ENV['BUILD_DIR'] = File.join(ENV['ROOT_DIR'], 'DerivedData')

SLACK_URL_DEFAULT = 'https://hooks.slack.com/services/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'
SLACK_ANDROID_FOOTER_ICON_URL = 'http://findicons.com/files/icons/820/simply_google/256/google_android.png'
SLACK_IOS_FOOTER_ICON_URL = 'http://www.freeiconspng.com/uploads/app-ios-png-4.png'

default_platform :ios

################################################################################
# @!group Android
################################################################################

platform :android do

  ##############################################################################
  # @!group Android public lanes
  ##############################################################################

  desc 'Run all tasks listed in RELEASE_APP env variable'
  lane :release_app do
    ensure_not_null('RELEASE_APP')
    tasks = ENV['RELEASE_APP'].split(',')
    tasks.each do |task|
      before_task if defined? before_task
      gradle(task: 'clean')
      gradle(task: task)
      after_task if defined? after_task
    end
  end

  desc 'Run a gradle task providing task, build_type and flavor options (assembleRelease by default)'
  lane :run_task do |options|
    before_task if defined? before_task
    gradle(task: 'clean')
    task = options[:task] || 'assemble'
    build_type = options[:build_type] || 'Release'
    flavor = options[:flavor]
    if flavor.nil?
      gradle(task: task.capitalize, build_type: build_type.capitalize)
    else
      gradle(task: task.capitalize, flavor: flavor.capitalize, build_type: build_type.capitalize)
    end
    after_task if defined? after_task
  end

  desc 'Upload the built APK to the Google Play Store providing a track (default is internal). If the version code of the APK is not higher than the maximum version code on the Google Play Store, do nothing and fail gracefully'
  lane :play_store do |options|
    apk_path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    if apk_path.nil? || apk_path.empty?
      UI.error("Cannot send to Google Play Store as no APK output path has been found")
      exit(1)
    end
    split_path = apk_path.split('/')
    split_path.pop
    split_path.push "output.json"
    output_info_path = split_path.join('/')
    data_hash = JSON.parse(File.read(output_info_path))
    version_code_apk = data_hash[0]["apkInfo"]["versionCode"]
    UI.message "The pushed APK version code is #{version_code_apk}"
    track = options[:track] || "internal"
    version_code_store = ['production', 'beta', 'alpha', 'internal', 'rollout']
      .map{|track| google_play_track_version_codes(track: track)}
      .reduce(:+)
      .max
    UI.message "The highest version code of the APK on the Google Play Store is #{version_code_store}"
    if version_code_apk > version_code_store
      UI.message "Sending the APK to the Google Play Console on the #{track} track !"
      supply(apk: apk_path, track: track)
    else
      UI.message "An APK with a higher version code has already been uploaded to the Google Play Store. So this APK cannot be pushed onto the Google Play Store. Please increase the version code."
    end
  end

  ##############################################################################
  # @!group Android private lanes
  ##############################################################################

  private_lane :root_project_name do |_|
    result = gradle(task: 'projects')
    result.split("\n").map { |line| line.match(/Root project '(.*)'/) ? $1 : nil }.compact.first
  end

  ##############################################################################
  # @!group Android fastlane blocks
  ##############################################################################

  before_all do |_, _|
    ENV['PLATFORM_NAME'] = :android.to_s
    @started = Time.now
  end

  after_all do |_, _|
    duration = ((Time.now - @started) / 60.0).round
    post_message(duration, true, nil)
  end

  error do |_, exception, _|
    duration = ((Time.now - @started) / 60.0).round
    post_message(duration, false, exception)
  end

end

################################################################################
# @!group iOS
################################################################################

platform :ios do

  ##############################################################################
  # @!group iOS public lanes
  ##############################################################################

  desc 'Archive and export a new Beta version (Smart&Soft inHouse) that can be deployed to Dispenser'
  lane :build_beta do |_|
    before_beta if defined? before_beta
    clear_derived_data
    cocoapods(use_bundle_exec: false, repo_update: true)
    export_method = 'enterprise'
    output_name = ipa_name(export_method)
    gym(export_method: export_method,
        output_name: output_name)
    after_beta if defined? after_beta
  end

  desc 'Archive and export a new Ad Hoc version'
  lane :build_ad_hoc do |_|
    before_ad_hoc if defined? before_ad_hoc
    project_team
    app_identifier
    app_group_identifiers
    app_wk_identifiers
    project_provisioning
    provisioning_profile_specifier
    clear_derived_data
    cocoapods(use_bundle_exec: false, repo_update: true)
    export_method = 'ad-hoc'
    output_name = ipa_name(export_method)
    gym(export_method: export_method,
        output_name: output_name)
    after_ad_hoc if defined? after_ad_hoc
  end

  desc 'Archive and export a new App Store version to upload using Xcode or Application Loader'
  lane :build_app_store do |_|
    before_store if defined? before_store
    project_team
    app_identifier
    app_group_identifiers
    app_wk_identifiers
    project_provisioning
    provisioning_profile_specifier
    clear_derived_data
    cocoapods(use_bundle_exec: false, repo_update: true)
    export_method = 'app-store'
    output_name = ipa_name(export_method)
    gym(export_method: export_method,
        output_name: output_name)
    after_store if defined? after_store
  end

  desc 'Create keys, certs and profiles for all targets using match'
  lane :create_profiles do |_|
    ensure_not_null('MATCH_IDENTIFIERS')
    identifiers = ENV['MATCH_IDENTIFIERS'].split(',')
    UI.message "Using identifiers #{identifiers}..."
    platform = ENV['MATCH_PLATFORM'] || 'ios'
    match(app_identifier: identifiers, platform: platform, type: 'development')
    match(app_identifier: identifiers, platform: platform, type: 'enterprise')
  end

  desc 'Force renew keys, certs and profiles for all targets using match'
  lane :update_profiles do |_|
    ensure_not_null('MATCH_IDENTIFIERS')
    identifiers = ENV['MATCH_IDENTIFIERS'].split(',')
    UI.message "Using identifiers #{identifiers}..."
    platform = ENV['MATCH_PLATFORM'] || 'ios'
    match(app_identifier: identifiers, platform: platform, force: true, type: 'development')
    match(app_identifier: identifiers, platform: platform, force: true, type: 'enterprise')
  end

  desc 'Synchronize keys, certs and profiles for all targets using match'
  lane :sync_profiles do |_|
    ensure_not_null('MATCH_IDENTIFIERS')
    identifiers = ENV['MATCH_IDENTIFIERS'].split(',')
    UI.message "Using identifiers #{identifiers}..."
    platform = ENV['MATCH_PLATFORM'] || 'ios'
    match(app_identifier: identifiers, platform: platform, readonly: true, type: 'development')
    match(app_identifier: identifiers, platform: platform, readonly: true, type: 'enterprise')
  end

  desc 'Check your app using a community driven set of App Store review rules to avoid being rejected'
  lane :check_metadata do
    ensure_not_null('FASTLANE_APP_IDENTIFIER')
    ENV['PRECHECK_APP_IDENTIFIER'] = ENV['FASTLANE_APP_IDENTIFIER']
    ensure_not_null('PILOT_USERNAME')
    ENV['PRECHECK_USERNAME'] = ENV['PILOT_USERNAME']
    ensure_not_null('FASTLANE_ITC_TEAM_NAME')
    ENV['PRECHECK_TEAM_NAME'] = ENV['FASTLANE_ITC_TEAM_NAME']
    ensure_not_null('PRECHECK_TEAM_ID')
    precheck
  end

  lane :refresh_dsyms do
    ensure_not_null('ITUNESCONNECT_USER')
    ENV['DOWNLOAD_DSYMS_USERNAME'] = ENV['ITUNESCONNECT_USER']
    ensure_not_null('FASTLANE_APP_IDENTIFIER')
    ENV['DOWNLOAD_DSYMS_APP_IDENTIFIER'] = ENV['FASTLANE_APP_IDENTIFIER']
    # Download dSYM files from iTC
    if ENV['DOWNLOAD_DSYMS_VERSION'].nil? || ENV['DOWNLOAD_DSYMS_VERSION'].empty?
      download_dsyms(version: 'latest') # Force latest in case nothing is specified using the env variable
    else
      download_dsyms
    end
    upload_symbols_to_crashlytics        # Upload them to Crashlytics
    clean_build_artifacts                # Delete the local dSYM files
  end

  ##############################################################################
  # @!group iOS private lanes
  ##############################################################################

  private_lane :project_team do |_|
    xcode_project_path = File.expand_path(ENV['XCODE_PROJECT'], ENV['ROOT_DIR'])
    team_id = ENV['GYM_EXPORT_TEAM_ID']
    update_project_team(path: xcode_project_path, teamid: team_id)
  end

  private_lane :app_identifier do |_|
    xcode_project_path = File.expand_path(ENV['XCODE_PROJECT'], ENV['ROOT_DIR'])
    unless ENV['APP_BUNDLE_IDENTIFIER'].nil?
      update_app_identifier(xcodeproj: xcode_project_path,
                            plist_path: ENV['APP_PLIST_PATH'],
                            app_identifier: ENV['APP_BUNDLE_IDENTIFIER'])
    end
    app_extensions.each do |extension|
      next if ENV["#{extension}_BUNDLE_IDENTIFIER"].nil?
      update_app_identifier(xcodeproj: xcode_project_path,
                            plist_path: ENV["#{extension}_PLIST_PATH"],
                            app_identifier: ENV["#{extension}_BUNDLE_IDENTIFIER"])
    end
  end

  private_lane :app_wk_identifiers do |_|
    xcode_project_path = File.expand_path(ENV['XCODE_PROJECT'], ENV['ROOT_DIR'])
    watch_app_bundle_identifier = nil
    app_extensions.each do |extension|
      next if ENV["#{extension}_BUNDLE_IDENTIFIER"].nil?
      plist_path = ENV["#{extension}_PLIST_PATH"]
      is_watch_app = get_info_plist_value(path: File.join(File.dirname(ENV['XCODE_PROJECT']), plist_path), key: 'WKWatchKitApp') || false
      watch_app_bundle_identifier = ENV["#{extension}_BUNDLE_IDENTIFIER"] if is_watch_app
      update_info_plist(xcodeproj: xcode_project_path,
                        plist_path: plist_path,
                        block: lambda {|plist|
                          plist['WKCompanionAppBundleIdentifier'] = ENV['APP_BUNDLE_IDENTIFIER'] if plist.has_key?('WKCompanionAppBundleIdentifier')
                        })
      update_info_plist(xcodeproj: xcode_project_path,
                        plist_path: plist_path,
                        block: lambda {|plist|
                          if plist.has_key?('NSExtension') &&
                              plist['NSExtension'].has_key?('NSExtensionAttributes') &&
                              plist['NSExtension']['NSExtensionAttributes'].has_key?('WKAppBundleIdentifier')
                            if watch_app_bundle_identifier.nil?
                              UI.error("Couldn't find Watch App Bundle Identifier in previous Application Extensions")
                              exit(1)
                            end
                            plist['NSExtension']['NSExtensionAttributes']['WKAppBundleIdentifier'] = watch_app_bundle_identifier
                          end
                        })
    end
  end

  private_lane :app_group_identifiers do |_|
    unless ENV['APP_GROUP_IDENTIFIERS'].nil?
      app_group_identifiers = ENV['APP_GROUP_IDENTIFIERS'].split(',')
      unless ENV['APP_ENTITLEMENTS_PATH'].nil?
        entitlements_path = File.expand_path(ENV['APP_ENTITLEMENTS_PATH'], ENV['ROOT_DIR'])
        update_app_group_identifiers(entitlements_file: entitlements_path,
                                     app_group_identifiers: app_group_identifiers)
      end
      app_extensions.each do |extension|
        next if ENV["#{extension}_ENTITLEMENTS_PATH"].nil?
        entitlements_path = File.expand_path(ENV["#{extension}_ENTITLEMENTS_PATH"], ENV['ROOT_DIR'])
        update_app_group_identifiers(entitlements_file: entitlements_path,
                                     app_group_identifiers: app_group_identifiers)
      end
    end
  end

  private_lane :project_provisioning do |_|
    xcode_project_path = File.expand_path(ENV['XCODE_PROJECT'], ENV['ROOT_DIR'])
    unless ENV['APP_BUNDLE_IDENTIFIER'].nil?
      profile = File.expand_path(ENV['APP_MOBILE_PROVISION_PATH'], ENV['ROOT_DIR'])
      update_project_provisioning(xcodeproj: xcode_project_path,
                                  profile: profile,
                                  target_filter: ENV['APP_TARGET'],
                                  build_configuration: 'Release')
    end
    app_extensions.each do |extension|
      next if ENV["#{extension}_BUNDLE_IDENTIFIER"].nil?
      profile = File.expand_path(ENV["#{extension}_MOBILE_PROVISION_PATH"], ENV['ROOT_DIR'])
      update_project_provisioning(xcodeproj: xcode_project_path,
                                  profile: profile,
                                  target_filter: ENV["#{extension}_TARGET"],
                                  build_configuration: 'Release')
    end
  end

  private_lane :provisioning_profile_specifier do |_|
    xcode_project_path = File.expand_path(ENV['XCODE_PROJECT'], ENV['ROOT_DIR'])
    unless ENV['APP_BUNDLE_IDENTIFIER'].nil?
      update_provisioning_profile_specifier(xcodeproj: xcode_project_path,
                                            target: ENV['APP_TARGET'],
                                            new_specifier: ENV['APP_PROFILE_SPECIFIER'])
    end
    app_extensions.each do |extension|
      next if ENV["#{extension}_BUNDLE_IDENTIFIER"].nil?
      update_provisioning_profile_specifier(xcodeproj: xcode_project_path,
                                            target: ENV["#{extension}_TARGET"],
                                            new_specifier: ENV["#{extension}_PROFILE_SPECIFIER"])
    end
  end

  private_lane :set_beta_version do |_|
    xcode_project_path = File.expand_path(ENV['XCODE_PROJECT'], ENV['ROOT_DIR'])
    app_env = (ENV['APP_ENVIRONMENT'].nil? || ENV['APP_ENVIRONMENT'].empty?) ? '' : "-#{ENV['APP_ENVIRONMENT']}"
    abbreviated_commit_hash = last_git_commit[:abbreviated_commit_hash]
    version_number = get_version_number
    increment_version_number(xcodeproj: xcode_project_path, version_number: "#{version_number}#{app_env}-#{abbreviated_commit_hash}")
    increment_build_number(xcodeproj: xcode_project_path, build_number: 1)
  end

  private_lane :increment_testflight_build_number do |_|
    xcode_project_path = File.expand_path(ENV['XCODE_PROJECT'], ENV['ROOT_DIR'])
    increment_build_number(xcodeproj: xcode_project_path, build_number: latest_testflight_build_number + 1)
  end

  desc 'Launch automatically a Carthage update for projects whose Carthage is a must-have'
  private_lane :carthage_update do |_|
    carthage(command: 'update', platform: 'iOS', use_binaries: false, project_directory: ENV['ROOT_DIR'], cache_builds: true)
  end

  ##############################################################################
  # @!group iOS fastlane blocks
  ##############################################################################

  before_all do |_, _|
    ENV['PLATFORM_NAME'] = :ios.to_s
    @started = Time.now
    xcode_select xcode_path(ENV['XCODE_VERSION'])
  end

  after_all do |_, _|
    duration = ((Time.now - @started) / 60.0).round
    post_message(duration, true, nil)
  end

  error do |_, exception, _|
    duration = ((Time.now - @started) / 60.0).round
    post_message(duration, false, exception)
  end

end

################################################################################
# @!group General private lanes
################################################################################

private_lane :smartdistrib do |_|
  files = Array.new
  ipa = Actions.lane_context[SharedValues::IPA_OUTPUT_PATH]
  files << ipa unless ipa.nil?
  apk = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
  files << apk unless apk.nil?
  all_apk = Actions.lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS]
  files += all_apk unless all_apk.nil?
  apk_modules = Array.new
  if android?
    apk_modules = ENV['FTP_APK_MODULES'].split(',') unless ENV['FTP_APK_MODULES'].nil?
  end
  dir_name = 'www/shared/' + ENV['FTP_DIRECTORY_NAME']
  files.uniq
      .select {|file|
        apk_module = file.gsub("#{ENV['ROOT_DIR']}/", '').split('/').first
        apk_modules.empty? || apk_modules.include?(apk_module)
      }
      .each {|file|
        ftp(host: ENV['FTP_HOST'],
            username: ENV['FTP_LOGIN'],
            password: ENV['FTP_PASSWORD'],
            upload: {src: file, dest: dir_name})
      }
  ENV['SMARTDISTRIB_URL'] = 'http://www.smartdistrib.com/shared/' + ENV['FTP_DIRECTORY_NAME']
end

private_lane :dispenser do |_|
  # Retrieve artifacts
  files = Array.new
  ipa = Actions.lane_context[SharedValues::IPA_OUTPUT_PATH]
  files << ipa unless ipa.nil?
  apk = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
  files << apk unless apk.nil?
  all_apk = Actions.lane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS]
  files += all_apk unless all_apk.nil?
  apk_modules = Array.new
  if android?
    apk_modules = ENV['DISPENSER_APK_MODULES'].split(',') unless ENV['DISPENSER_APK_MODULES'].nil?
  end

  # Dispenser uploads
  files.uniq
      .select {|file|
        apk_module = file.gsub("#{ENV['ROOT_DIR']}/", '').split('/').first
        apk_modules.empty? || apk_modules.include?(apk_module)
      }
      .each {|file|
        file_name = File.basename(file)
        file_name.slice! File.extname(file_name)
        RestClient::Request.execute(
          :method => :post,
          :verify_ssl => false,
          :url => 'https://dispenser.cyllene.co/api/v1/artifact/upload',
          :payload => {
            :slug => file_name,
            :artifact => File.new(file),
            :projectSlug => ENV['DISPENSER_PROJECT'],
          },
          :headers => {
            'X-Dispenser-Token' => ENV['DISPENSER_TOKEN']
          }
        )
      }
  ENV['DISPENSER_URL'] = 'http://dispenser.cyllene.co/projects/' + ENV['DISPENSER_PROJECT']
end

################################################################################
# @!group methods
################################################################################

def xcode_path(xcode_version)
  "/Applications/Xcode-#{xcode_version}.app"
end

def find_xcode_path(xcode_version)
  return nil if xcode_version.nil?
  xcode_paths = `mdfind "kMDItemCFBundleIdentifier == 'com.apple.dt.Xcode' && kMDItemVersion == '#{xcode_version}'"`.split("\n")
  if xcode_paths.empty?
    puts "Unable to find Xcode version #{xcode_version} on this computer."
    abort
  end
  path_versions = Hash[xcode_paths.map {|path| [path, `mdls -raw -name kMDItemVersion "#{path}"`]}] # { path => version, … }
  selected_xcode_path = xcode_paths.sort {|p1, p2| path_versions[p1] <=> path_versions[p2]}.first
  puts "Using Xcode version #{xcode_version} found here: #{selected_xcode_path}"
  selected_xcode_path
end

def app_extensions
  (1..12).map {|index| "APP_EXT_#{index}"}
end

def post_message(duration, success, exception)
  if continuous_integration?
    if android?
      scheme = root_project_name || 'Smartlane'
    else
      scheme = ENV['GYM_SCHEME'] || 'Smartlane'
    end
    message = success ? "#{scheme} build succeeded !! :rocket: :tada:" : "#{scheme} build failed :scream: :sob:"
    payload = Hash.new
    if success
      payload['Duration'] = "Smartlane just saved you #{duration} minutes! 🎉"
      dispenser = ENV['DISPENSER_URL']
      payload['Dispenser'] = dispenser unless dispenser.nil?
    else
      payload['Error'] = exception.message
    end
    attachment_properties = Hash.new
    attachment_properties['footer'] = android? ? 'Android' : 'iOS'
    footer_icon = android? ? SLACK_ANDROID_FOOTER_ICON_URL : SLACK_IOS_FOOTER_ICON_URL
    attachment_properties['footer_icon'] = footer_icon
    slack(slack_url: ENV['SLACK_URL'] || SLACK_URL_DEFAULT,
          message: message,
          success: success,
          use_webhook_configured_username_and_icon: true,
          payload: payload,
          default_payloads: %i[lane git_branch git_author last_git_commit_message last_git_commit_hash],
          attachment_properties: attachment_properties)
  end
end

def ipa_name(export_method)
  app_env = (ENV['APP_ENVIRONMENT'].nil? || ENV['APP_ENVIRONMENT'].empty?) ? '' : "-#{ENV['APP_ENVIRONMENT']}".gsub('/', '-').gsub('_', '-').downcase
  branch = git_branch.gsub('/', '-').gsub('_', '-').downcase
  "#{ENV['IPA_NAME']}#{app_env}-#{export_method}-#{branch}"
end

def continuous_integration?
  !ENV['TEAMCITY_VERSION'].nil?
end

def android?
  ENV['PLATFORM_NAME'] == :android.to_s
end

def ensure_not_null(env_variable)
  if ENV[env_variable].nil? || ENV[env_variable].empty?
    UI.error("Seems like you didn't set the #{env_variable} variable in your .env file")
    exit(1)
  end
end
