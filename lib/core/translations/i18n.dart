import 'dart:async';

import 'package:flutter/material.dart';

/// This class is generated by flappy_translator package
/// You should never change something directly in this file but, instead, generate new file when needed with the package
class I18n {
  String appTitle({String title, int versionNumber, }) {
      String text = _getText("appTitle");
              if (title != null) {
          text = text.replaceAll("%title\$s", title);
        }
                if (versionNumber != null) {
          text = text.replaceAll("%versionNumber\$d", versionNumber.toString());
        }
              return text;
      
      }
      String get networkErrorTitle => _getText("networkErrorTitle");

String get retry => _getText("retry");

String get emailHint => _getText("emailHint");

String get passwordHint => _getText("passwordHint");

String get title => _getText("title");



  I18n(Locale locale) {
    this._locale = locale;
     _localizedValues = null;
  }

  Locale _locale;

  static Map<String, String> _localizedValues;

        
static Map<String, String> _frValues = {
              "appTitle": "Super \"titre\" : %title\$s v %versionNumber\$d",
                "networkErrorTitle": "Aucun réseau",
                "retry": "Réessayer",
                "emailHint": "Email",
                "passwordHint": "Mot de passe",
                "title": "Modèle",
        };
      
static Map<String, String> _enValues = {
              "appTitle": "Awesome \"title\" : %title\$s v %versionNumber\$d",
                "networkErrorTitle": "Network error",
                "retry": "Retry",
                "emailHint": "Email",
                "passwordHint": "Password",
                "title": "Model",
        };
    static Map<String, Map<String, String>> _allValues = {
            "fr": _frValues,
              "en": _enValues,
      };

  static I18n of(BuildContext context) {
    return Localizations.of<I18n>(context, I18n);
  }

  String _getText(String key) {
    return _localizedValues[key] ?? '** $key not found';
  }

  static Future<I18n> load(Locale locale) async {
    I18n translations = new I18n(locale);
    _localizedValues = _allValues[locale.languageCode];
    return translations;
  }

  get currentLanguage => _locale.languageCode;
}

class I18nDelegate extends LocalizationsDelegate<I18n> {
  const I18nDelegate();

  @override
      bool isSupported(Locale locale) => ['fr', 'en'].contains(locale.languageCode);

  @override
  Future<I18n> load(Locale locale) => I18n.load(locale);

  @override
  bool shouldReload(I18nDelegate old) => false;
}

